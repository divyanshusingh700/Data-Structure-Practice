
class Solution {
    public int[][] insert(int[][] interval, int[] newInterval) {
        int n = interval.length;
        if(n==0)return new int[][]{newInterval};
        List<int[]> res = new ArrayList<>();

        int[][] intervals = new int[n+1][2];
        for(int i=0; i<n; i++){
            intervals[i] = interval[i];
        }

        intervals[n] = newInterval;
        Arrays.sort(intervals, (a,b)-> Integer.compare(a[1],b[1]));

        Stack<int[]> st = new Stack<>();
        for(int[] row: intervals){
            st.push(row);
        }

        int[] prev = st.pop();
        while(!st.isEmpty()){
            int[] curr = st.pop();

            if(curr[1]<prev[0]){
                res.add(prev);
                prev = curr;
            }else{
                int[] newe = {Math.min(curr[0], prev[0]), Math.max(curr[1], prev[1])};
                prev = newe;
            }
        }
        res.add(prev);
        int[][] ans = res.toArray(new int[res.size()][]);
        Arrays.sort(ans, (a,b)->Integer.compare(a[0], b[0]));
        return ans;
    }
}