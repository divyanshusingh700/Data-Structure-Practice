class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(i==0 || j==0){
                    dp[i][j] = 1; continue;
                }
                dp[i][j] = dp[i][j-1] + dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
}


// meo _recursive solution
class Solution {
    int m;
    int n;
    int[][] memo;
    public int uniquePaths(int m, int n) {
        this.m = m; this.n = n;
        this.memo = new int[m+1][n+1];
        for(int[] row:memo)Arrays.fill(row, -1);
        return solve(0, 0);
    }
    public int solve(int i, int j){
        if(i==m-1 && j==n-1){
            return 1;
        }
        if(memo[i][j]!=-1)return memo[i][j];
        int right = 0;
        int down = 0;
        if(i==m-1) {
            right =  solve(i, j+1);
            return memo[i][j] = right;
        }
        else if(j==n-1) {
            down = solve(i+1, j);
            return memo[i][j] = down;
        }
        else {
            right = solve(i+1, j);
            down = solve(i, j+1);
            return memo[i][j] = right+down;
        }
    }
}