class Solution {
    public int maxSumIS(int arr[]) {
        int n = arr.length;
        int[] dp = new int[n];
        int mx = 0;
        for(int i=0; i<n; i++){
            dp[i] = arr[i];
            for(int j=0; j<i; j++){
                if(arr[i]>arr[j]){
                    dp[i] = Math.max(dp[i], dp[j]+arr[i]);
                }
            }
            mx = Math.max(mx, dp[i]);
        }
        return mx;
    }
}
// Memo using recursion
class Solution {
    int[][] memo;
    public int maxSumIS(int arr[]) {
        int n = arr.length;
        memo = new int[n+1][n+1];
        for(int[] row:memo)Arrays.fill(row, -1);
        return helper(arr, n-1, n);
        // return memo[n];
    }
    public int helper(int[] arr, int idx, int prevIdx){
        if(idx<0)return 0;
        if(memo[idx][prevIdx]!=-1)return memo[idx][prevIdx];
        int take = 0;
        if(prevIdx == arr.length || arr[idx]<arr[prevIdx]){
            take = arr[idx] + helper(arr, idx-1, idx);
        }
        int skip = helper(arr, idx-1, prevIdx);
        return memo[idx][prevIdx] = Math.max(take, skip);
    }
}