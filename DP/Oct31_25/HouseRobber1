class Solution {
    public int rob(int[] arr) {
        int n = arr.length;
        int[] dp = new int[n+1];
        dp[1] = arr[0];
        for(int i=2; i<n+1;i++){
            dp[i] = Math.max(dp[i-1], arr[i-1]+dp[i-2]);
        }
        return dp[n];
    }
}


class Solution {
    int[] memo;
    public int rob(int[] nums) {
        int n = nums.length;
        memo = new int[n];
        Arrays.fill(memo, -1);
        return helper(n-1, nums);
    }
    public int helper(int idx, int[] arr){
        if(idx<0)return 0;
        if(memo[idx]!=-1)return memo[idx];
        int take = arr[idx] + helper(idx-2, arr);
        int skip = helper(idx-1, arr);
        return memo[idx] = Math.max(take, skip);
    }
}